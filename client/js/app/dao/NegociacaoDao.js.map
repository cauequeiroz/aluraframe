{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","addRequest","transaction","objectStore","add","onsuccess","onerror","listRequest","openCursor","negociacoes","currentLine","e","target","result","value","push","Negociacao","_data","_quantidade","_valor","continue","clearRequest","clear"],"mappings":";;;;;;IAAMA,a;AAEF,2BAAYC,UAAZ,EAAwB;AAAA;;AAEpB,aAAKC,WAAL,GAAmBD,UAAnB;AACA,aAAKE,MAAL,GAAc,aAAd;AACH;;;;iCAEQC,U,EAAY;AAAA;;AAEjB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,aAAa,MAAKN,WAAL,CACZO,WADY,CACA,MAAKN,MADL,EACa,WADb,EAEZO,WAFY,CAEA,MAAKP,MAFL,EAGZQ,GAHY,CAGRP,UAHQ,CAAjB;;AAKAI,2BAAWI,SAAX,GAAuB;AAAA,2BAAMN,QAAQ,oCAAR,CAAN;AAAA,iBAAvB;AACAE,2BAAWK,OAAX,GAAsB;AAAA,2BAAMN,OAAO,gCAAP,CAAN;AAAA,iBAAtB;AACH,aATM,CAAP;AAUH;;;qCAEY;AAAA;;AAET,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIO,cAAc,OAAKZ,WAAL,CACbO,WADa,CACD,OAAKN,MADJ,EACY,WADZ,EAEbO,WAFa,CAED,OAAKP,MAFJ,EAGbY,UAHa,EAAlB;;AAKA,oBAAIC,cAAc,EAAlB;;AAEAF,4BAAYF,SAAZ,GAAwB,aAAK;;AAEzB,wBAAIK,cAAcC,EAAEC,MAAF,CAASC,MAA3B;;AAEA,wBAAKH,WAAL,EAAmB;AACf,4BAAII,QAAQJ,YAAYI,KAAxB;AACAL,oCAAYM,IAAZ,CAAiB,IAAIC,UAAJ,CAAeF,MAAMG,KAArB,EAA4BH,MAAMI,WAAlC,EAA+CJ,MAAMK,MAArD,CAAjB;AACAT,oCAAYU,QAAZ;AACH,qBAJD,MAIO;AACHrB,gCAAQU,WAAR;AACH;AACJ,iBAXD;AAYAF,4BAAYD,OAAZ,GAAsB;AAAA,2BAAKN,OAAO,2CAAP,CAAL;AAAA,iBAAtB;AACH,aAtBM,CAAP;AAuBH;;;gCAEO;AAAA;;AAEJ,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIqB,eAAe,OAAK1B,WAAL,CACdO,WADc,CACF,OAAKN,MADH,EACW,WADX,EAEdO,WAFc,CAEF,OAAKP,MAFH,EAGd0B,KAHc,EAAnB;;AAKAD,6BAAahB,SAAb,GAAyB;AAAA,2BAAKN,QAAQ,mCAAR,CAAL;AAAA,iBAAzB;AACAsB,6BAAaf,OAAb,GAAuB;AAAA,2BAAKN,OAAO,yCAAP,CAAL;AAAA,iBAAvB;AACH,aATM,CAAP;AAUH","file":"NegociacaoDao.js","sourcesContent":["class NegociacaoDao {\n\n    constructor(connection) {\n\n        this._connection = connection;\n        this._store = 'negociacoes';\n    }\n\n    adiciona(negociacao) {\n\n        return new Promise((resolve, reject) => {\n\n            let addRequest = this._connection\n                .transaction(this._store, 'readwrite')\n                .objectStore(this._store)\n                .add(negociacao);\n\n            addRequest.onsuccess = () => resolve('Negociação adicionada com sucesso.');\n            addRequest.onerror  = () => reject('Negociação não foi adicionada.');\n        });\n    }\n\n    listaTodos() {\n\n        return new Promise((resolve, reject) => {\n\n            let listRequest = this._connection\n                .transaction(this._store, 'readwrite')\n                .objectStore(this._store)\n                .openCursor();\n\n            let negociacoes = [];\n\n            listRequest.onsuccess = e => {\n                \n                let currentLine = e.target.result;\n\n                if ( currentLine ) {\n                    let value = currentLine.value;\n                    negociacoes.push(new Negociacao(value._data, value._quantidade, value._valor));\n                    currentLine.continue();\n                } else {\n                    resolve(negociacoes);\n                }      \n            }\n            listRequest.onerror = e => reject('Não foi possível importar as negociações.');\n        });\n    }\n\n    apaga() {\n\n        return new Promise((resolve, reject) => {\n\n            let clearRequest = this._connection\n                .transaction(this._store, 'readwrite')\n                .objectStore(this._store)\n                .clear();\n            \n            clearRequest.onsuccess = e => resolve('Negociações apagadas com sucesso.');\n            clearRequest.onerror = e => reject('Não foi possível apagar as negociações.');\n        });\n    }\n}"]}