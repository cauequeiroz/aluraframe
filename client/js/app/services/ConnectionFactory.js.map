{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","dbName","version","stores","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAW;;AAEhC,QAAMC,SAAS,YAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,CAAC,aAAD,CAAf;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AAEI,qCAAc;AAAA;;AAEV,kBAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACH;;AALL;AAAA;AAAA,4CAO2B;;AAEnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBZ,MAAtB,EAA8BC,OAA9B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;;AAE/Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAHD;AAIAR,gCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,4BAAK,CAACf,UAAN,EAAmB;AACfA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAW;AAC1B,sCAAM,IAAIC,KAAJ,CAAU,iCAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AACH,qBAVD;AAWAM,gCAAYW,OAAZ,GAAsB,aAAK;;AAEvBZ,+BAAOO,EAAEC,MAAF,CAASK,KAAT,CAAeC,IAAtB;AACH,qBAHD;AAIH,iBAvBM,CAAP;AAwBH;AAjCL;AAAA;AAAA,8CAoC6B;;AAErB,oBAAKnB,UAAL,EAAkB;AACdC;AACAD,iCAAa,IAAb;AACH;AACJ;AA1CL;AAAA;AAAA,0CA4CyBA,UA5CzB,EA4CqC;;AAE7BD,uBAAOqB,OAAP,CAAe,iBAAS;;AAEpB,wBAAKpB,WAAWqB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAL,EACIvB,WAAWwB,iBAAX,CAA6BD,KAA7B;;AAEJvB,+BAAWyB,iBAAX,CAA6BF,KAA7B;AACH,iBAND;AAOH;AArDL;;AAAA;AAAA;AAuDH,CAhEuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["let ConnectionFactory = (function() {\n\n    const dbName = 'aluraframe';\n    const version = 4;\n    const stores = ['negociacoes'];\n\n    let connection = null;\n    let close = null;\n    \n    return class ConnectionFactory {\n\n        constructor() {\n\n            throw new Error('Essa classe não pode ser instanciada.');\n        }\n\n        static getConnection() {\n\n            return new Promise((resolve, reject) => {\n\n                let openRequest = window.indexedDB.open(dbName, version);\n                \n                openRequest.onupgradeneeded = e => {\n\n                    ConnectionFactory._createStores(e.target.result);\n                }\n                openRequest.onsuccess = e => {\n\n                    if ( !connection ) {\n                        connection = e.target.result;\n                        close = connection.close.bind(connection);\n                        connection.close = function() {\n                            throw new Error('Você não pode fechar a conexão.');\n                        }\n                    }\n                    resolve(connection);\n                }\n                openRequest.onerror = e => {\n\n                    reject(e.target.error.name);\n                }\n            });\n        }\n\n        \n        static closeConnection() {\n            \n            if ( connection ) {\n                close();\n                connection = null;\n            }\n        }\n        \n        static _createStores(connection) {\n    \n            stores.forEach(store => {\n    \n                if ( connection.objectStoreNames.contains(store) )\n                    connection.deleteObjectStore(store);\n    \n                connection.createObjectStore(store);\n            });\n        }\n    }    \n})();"]}