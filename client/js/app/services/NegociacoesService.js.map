{"version":3,"sources":["../../app-es6/services/NegociacoesService.js"],"names":["NegociacoesService","_http","HttpService","negociacao","ConnectionFactory","getConnection","then","NegociacaoDao","connection","dao","adiciona","catch","erro","Error","apaga","listaTodos","arrayAtual","obterNegociaoes","negociacoes","filter","some","isEquals","negociacaoExistente","Promise","all","obterNegociaoesDaSemana","obterNegociaoesDaSemanaAnterior","obterNegociaoesDaSemanaRetrasada","response","reduce","prev","current","concat","get","map","Negociacao","Date","objeto","data","quantidade","valor"],"mappings":"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","file":"NegociacoesService.js","sourcesContent":["class NegociacoesService {\n    \n    constructor() {\n        \n        this._http = new HttpService();\n    }\n    \n    cadastra(negociacao) {\n    \n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.adiciona(negociacao))\n            .then(() => 'Negociação adicionada com sucesso!')\n            .catch((erro) => {\n                throw new Error('Não foi possível cadastras a negociação.')\n            });\n    }\n\n    apaga() {\n        \n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.apaga())\n            .then(() => 'Negociações apagadas com sucesso.')\n            .catch(erro => {\n                throw new Error('Não foi possível apagar as negociações.')\n            });\n    }\n    \n    listaTodos() {\n    \n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.listaTodos())\n            .catch(erro => {\n                throw new Error('Não foi possível listar as negociações.')\n            });\n    }\n\n    importa(arrayAtual) {\n\n        return this.obterNegociaoes()\n            .then(negociacoes =>\n                negociacoes.filter(negociacao =>\n                    !arrayAtual.some(negociacaoExistente =>\n                        negociacao.isEquals(negociacaoExistente))))\n            .catch(erro => {\n                throw new Error('Não foi possível importar as negociações');\n            });\n    }\n\n    obterNegociaoes() {\n\n        return Promise.all([\n                this.obterNegociaoesDaSemana(),\n                this.obterNegociaoesDaSemanaAnterior(),\n                this.obterNegociaoesDaSemanaRetrasada()\n            ])\n            .then(response => {\n                return response.reduce((prev, current) => prev.concat(current), []);\n            })\n            .catch(erro => {\n                throw new Error(erro);\n            });\n    }\n\n    obterNegociaoesDaSemana() {\n\n        return this._http.get('negociacoes/semana')\n            .then(response => {\n                return response.map(objeto =>\n                    new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(erro => {\n                throw new Error('Ocorreu um erro ao obter as negociações da semana.');\n            });            \n    }\n\n    obterNegociaoesDaSemanaAnterior() {\n        \n        return this._http.get('negociacoes/anterior')\n            .then(response => {\n                return response.map(objeto =>\n                    new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(erro => {\n                throw new Error('Ocorreu um erro ao obter as negociações da semana anterior.');\n            }); \n    }\n\n    obterNegociaoesDaSemanaRetrasada() {\n        \n        return this._http.get('negociacoes/retrasada')\n            .then(response => {\n                return response.map(objeto =>\n                    new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(erro => {                \n                throw new Error('Ocorreu um erro ao obter as negociações da semana retrasada.');\n            }); \n    }\n\n}"]}